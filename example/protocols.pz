# protocols.pz

# protocols can be defined
# protocols can be implemented by built-in types and custom structs
# adds fully-qualified functions in the current ctx (one per protocol x func, one per protocol x impl x func)
# the protocol function extracts the input type and calls the appropriate impl function
# the impl function can be called directly if needed (perf reasons)

# All built-in types and all custom structs can be parsed/unparsed
(protocol parsing (parse (s)) (unparse (x)))
(impl parsing.num (parse (s) (types.parse_num s)) (unparse (x) (types.unparse_num x)))
(impl parsing.str (parse (s) (types.parse_str s)) (unparse (x) (types.unparse_str x)))
(impl parsing.ident (parse (s) (types.parse_ident s)) (unparse (x) (types.unparse_ident x)))
(impl parsing.list (parse (s) (types.parse_list s)) (unparse (x) (types.unparse_list x)))
(impl parsing.dict (parse (s) (types.parse_dict s)) (unparse (x) (types.unparse_dict x)))
(impl parsing.func (parse (s) (types.parse_func s)) (unparse (x) (types.unparse_func x)))
(impl parsing.macro (parse (s) (types.parse_macro s)) (unparse (x) (types.unparse_macro x)))
(impl parsing.struct (parse (s) (types.parse_struct s)) (unparse (x) (types.unparse_struct x)))

# All built-in types can be prettied
(protocol showable (show (x)))
(impl showable.num (show (x) (parsing.num.unparse x)))
(impl showable.str (show (x) (x)))
(impl showable.ident (show (x) (parsing.ident.unparse x)))
(impl showable.list (show (x) (...))) # show list recursively
(impl showable.dict (show (x) (...))) # show dict recursively
(impl showable.func (show (x) (...))) # show func recursively
(impl showable.macro (show (x) (...))) # show macro recursively

# All custom structs have a default show impl
(impl showable.struct (show (x) (...))) # show struct recursively (type, fields, etc)

# Error structs have a specific show impl
(impl showable.struct.stack_frame (show (x) (...))) # show stack_frame for traceback in console
(impl showable.struct.error (show (x) (...))) # show error for traceback in console

# Default implementations of protocols
(protocol example
    (first (x) (second x))
    (second (x) (first x))
    # Minimal complete implementation: first or second
)

# Check if a given type implements a given protocol
