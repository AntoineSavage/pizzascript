# base.pz

# define 'def manually
# immediately invoke an anonymous function
((func ('eval ctx) () [
    (put 'def
        # This is the 'def definition
        (func ('quote ctx) (k v) [   
            (put k ((func ('deep_unquote) (x) x) v) ctx)
            () # 'def returns nothing
        ])
        ctx
    )
    () # this anonymous function returns nothing
]))

# useful functions
(def id (func (x) x))
(def flip (func (f x y) (f y x)))

(def quote (func ('quote) (x) x))
(def unquote (func ('unquote) (x) x))
(def deep_quote (func ('deep_quote) (x) x))
(def deep_unquote (func ('deep_unquote) (x) x))

# control structures
(def if (func ('quote) (qp qt qf)
    # can be any type
    (def p_any (deep_unquote qp))

    # can be 'false or 'true
    (def p (not (not p_any)))

    # qt or qf according to p
    (def qr (or
        (and p qt)
        (and (not p) qf)
    ))

    # evaluate result
    (deep_unquote qr)
))

# lists
(def list (func args args))
(def map (func (f xs)
    (if (empty xs)
        xs
        (cons
            (f (head xs))
            (tail xs)
        )
    )
))

# dictionaries
# TODO