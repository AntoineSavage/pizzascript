# Main.pz

# 'if is a macro to choose between alternatives
(def fac (func (n)                  # fac n =
    (if (lte n 1)                   #   if n <= 1
        1                           #   then 1
        (mult n (fac (sub n 1)))    #   else n * fac (n-1)
    )
))

# 'case is a macro to choose between alternatives
(def fib (func (n)          # fib n =
    (case
        ((lte n 0) 0)       #   if n <= 0 then 0
        ((eq n 1) 1)        #   else if n == 1 then 1
        ('true (add         #   else fib (n-1) + fib (n-2)
            (fib (sub n 1))
            (fib (sub n 2)))
        ))
    )
))

# the following are equivalent
(fac 5)
((func (n) (fac n)) 5)
(apply fac 5)       # apply applies the function to the args
(flip apply 5 fac)  # flip inverts the function's two args
((cmp id fac) 5)    # compose: (id (fac n))
((cmp fac id) 5)    # compose: (fac (id n))