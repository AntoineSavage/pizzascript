# Types.pz

# protocols can be defined
# protocols can be implemented by built-in types and custom structs
# adds fully-qualified functions in the current ctx (one per protocol x func, one per protocol x impl x func)
# the protocol function extracts the input type and calls the appropriate impl function
# the impl function can be called directly if needed (perf reasons)

# type identifiers
(typeof 0)          # -> 'num
(typeof "")         # -> 'str
(typeof 'fac)       # -> 'ident
(typeof '())        # -> 'list
(typeof (dict))     # -> 'dict
(typeof fac)        # -> 'func
(typeof func)       # -> 'macro
(typeof (struct0))  # -> 'struct

# parse X (use same functions as interpreter, inverse of unparse)
(parse_num "0")         # -> 0
(parse_str "\"\"")      # -> ""
(parse_ident "'fac")    # -> 'fac !!! CACHED !!!
(parse_list "'()")      # -> '()
(parse_dict "(dict)")   # -> (dict)
(parse_func "(func args args)")                 # -> (func args args)
(parse_macro "(macro ctx args '(ctx args))")    # -> (macro ctx args '(ctx args))
(parse_struct "(struct0)")                      # -> (struct0)
# on parse error, raise (error (kind 'ParseError) (msg "..."))

# unparse X (use same functions as interprter, inverse of parse)
(unparse_num 0)         # -> "0"
(unparse_str "")        # -> "\"\""
(unparse_ident 'fac)    # -> "'fac"
(unparse_list '())      # -> "'()"
(unparse_dict (dict))   # -> "(dict)"
(unparse_func (func args args))                 # -> "(func args args)"
(unparse_func (macro ctx args '(ctx args)'))    # -> "(macro ctx args '(ctx args))"
(unparse_struct (struct0))                      # -> "(struct0)"