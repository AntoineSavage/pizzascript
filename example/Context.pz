# Context

# aliasing (modules, definitions)
(def other Other_Parent.Other_Module)
(def func other.func)
(def other_func func)

# contexts support all dict operations:
# get, put, delete, update, etc
# adding non-ident keys does not impact resolution
# make symbols private by removing them from ctx
# each child ctx is an immutable fork of the parent ctx

# get current context
# the result context contains everything before 'curr_ctx
(def curr_ctx (get_ctx))

# This will be forgotten by next statement
(def forgotten (list 1 2 3))

# set current context
(set_ctx curr_ctx)

# temporary child context
# does not change the current context
# same evaluation function as interpreter
(def do (macro ctx stmts)
    (def init_ctx ctx)

    # unquote stmts left-to-right using ctx, keep last value as result
    # TODO

    # restore initial context
    (list init_ctx result)
)

(do
    (def temp (list))
    (print temp)
)

# switch context temporarily
# does not change the current context
# returns the updated input context and result
(def do_with_ctx (macro ctx args)
    (def other_ctx (head args))
    (def stmts (tail args))

    # unquote stmts left-to-right using other_ctx, keep last value as result
    # TODO

    # call-site context is unchanged
    # return updated context
    (list ctx other_ctx result)
)

(def ctx1 (...))
(def ctx2_and_result (do_with_ctx ctx1
    (def temp (list))
    (print temp)
    (def f (parse_func s))
    (def s_ (unparse_func f))
)